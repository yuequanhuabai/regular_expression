正则表达入门


场景：

1.能检查多个文件，挑出包含重复单词的行，高亮标记每个重复单词(使用标准ANSI的转义字符序列（escapse sequence）),同时必须显示这行文字来自哪个文件
2.能跨行查找，即使两个单词一个在某行末尾而另一个在下一行的开头，也算重复单词。
3.能进行不去分大小写的查找，例如 ‘The the...’，重复单词之间可以出现任意数量的空白字符（空格符、制表符、换行符之类）
4.能查找用HTML tag分隔的重复单词。HTML tag用于标记互联网的文本，例如，粗体单词是这样表示的：‘...it is <B>very</B> very important...’.

描述和分析文本
正则表达式能够添加、删除、分离、叠加、插入和修整各种类型的文和数据

使用第一个正则表达式的搜索和替换命令，读者就可以查找文档中的重复单词，并把它们标记为高亮。
加上另一个，你可以删除所有不包含重复单词的行
最后，利用第三个正则表达式，你可以确保结果中的所有行都以它所在的文件的名字开头。

*  表示任意文本
？ 任意单个字符
.  任意字符的字符组

完整的正则表达式由两种字符组成： 元字符(特殊字符)、文本(普通字符)；
普通字符对应单词，特殊字符对应语言的规则

^cat  以c作为第一行的第一个字符，紧接一个a，紧接一个t的文本。

字符组[]

sep[ea]r[ea]te    seperate , separate,separete,...


^cat$  文字意义：匹配的条件是，行开头(显然，每一行都有开头)，然后是字母c a t,然后是行末尾。
应用意义：只包含cat的行--没有多余的单词、空白字符... 只有'cat'.

^$  文字意义：匹配的条件是，行开头，然后就是行末尾。
    应用意义：空行(没有任何字符，包括空白字符)。

^   文字意义：匹配它条件是行的开头。
    应用意义：无意义！因为每一行都有开头，所以每一行都能匹配---空行也不例外。


 排除字符组 [^...]   


 多选结构：

 匹配任意子表达式
 Bob  和 Robert 是两个表达式，但是 Bob|Robert 就是两个表达式，这样的组合称为i“多选分支”

回头看  gr[e|a]y ,它还可以写作 grey|gray,或 gr(a|e)y

一个字符组只能匹配目标文本中的单个字符，而每个多选结构自身都可能是完整的正则表达式，都可以匹配任意长度的文本。


egrep '^(From|Subject|Date): ' mailbox

Ignoring Differences in Capitalization (忽略大小写)

egrep -i '^(From|Subject|Date): ' mailbox


单词分界符

\<cat\>   匹配单词的开头，然后匹配cat这三个字母，然后是单词的结束位置；更直接的说就是匹配cat这个单词

\<cat 和cat\> 分别表示 匹配以cat开头和cat结束的单词

+ ： 表示之前紧邻的元素出现一次或多次
* :  表示之前紧邻的元素出现任意多次，或者不出现
……* ： 表示匹配尽可能多的次数，如果实在无法匹配，也不要紧。
……+ ： 表示匹配尽可能多的次数，但如果连一次匹配都无法完成，就报告失败。
与……？一样，……*  永远不悔匹配失败，区别只在于它们匹配的结果，
而……+在无法进行任何一次匹配时，会报告匹配失败。


？ 可以不出现，也可以只出现一次(单词可选) {0,1}
*  可以出现无数次，也可以不出现(任意次可选){0,无穷}
+  可以出现无数次，但至少要出现一次(至少一次){1,无穷}


第25页：-->194页

12小时正则表达式： (1[012]|[1-9]):[0-5][0-9](am|pm)

自己的答案：
24小时 时间正则表达式: (0[0-9]|1[0-9]|2[0-3]):[0-5][0-9](am|pm)  
合并后的答案：([01][0-9]|2[0-3]):[0-5][0-9](am|pm) 
书本答案：
([01]?[0-9]|2[0-3]):[0-5][0-9](am|pm) 

escaped (转义)
flavor(流派)

量词作用的对象是它们之前紧邻的子表达式

使用括号的3个理由是：限制多选择结构、分组、捕获文本

转义的三种情况：
1.\加上元字符，表示匹配元字符所使用的普通字符
2.\加上非元字符，组成一种由具体实现方式规定其意义的元字符序列
3.\加上任意其他字符，默认情况就是匹配此字符

记住：字符组内部的反斜杠没有任何特殊意义

*和?限定的对象在“匹配成功”时可能没有匹配任何字符。即使什么字符都不能匹配到，它们仍然会报告“匹配成功”。

